@page "/"
@inject Smash_Notes.Server.BlogControlService.IBlogService BlogService
@inject Smash_Notes.Server.Data.IAuthService AuthService
@inject Smash_Notes.Server.CharacterControlService.ICharacterService CharacterService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@using Markdig
@using Smash_Notes.Shared.Dto.Blog

<!-- Blog Posts Container -->
<div class="p-4 space-y-8">
    @foreach (var post in blogPosts)
    {
        <div class="bg-white rounded-lg shadow p-4">
            <h2 class="text-2xl font-semibold">@post.Title</h2>
            <p class="text-gray-800">@post.Content</p>
        </div>
    }
</div>

@code {
    private List<GetBlogPostDto> blogPosts = new List<GetBlogPostDto>();
    string placeholderImage = "https://via.placeholder.com/1060x180";
    private string searchText = "";
    private List<Character> Characters = new List<Character>();
    private List<Character> postsCharacters = new List<Character>();
    private List<Character> postCharacters = new List<Character>();
    private List<Character> filteredCharacters = new List<Character>(); //used in HandleSearchInput() and LoadCharactersForBlogPosts()

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPosts();
        await LoadCharactersForBlogPosts(); //loads all characters of each blogpost into line 26
        AuthService.LoggedIn += LoadBlogPosts;
        AuthService.LoggedOut += OnLogOut;
    }

    public async Task CharcardClicked(int characterId)
    {
        var response = await CharacterService.GetBlogPostsByCharacterId(characterId); //filters blogpost at line 19
        if (response.Success)
        {
            if (response.Data != null)
            {
                blogPosts = response.Data;
                await LoadCharactersForBlogPosts();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No character defined.");
            }
        }
        else
        {
            Console.WriteLine("Error: " + response.Message);
        }
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        string searchInput = (e.Value?.ToString() ?? "").ToLower(); //if null it becomes null

        if (!string.IsNullOrWhiteSpace(searchInput))
        {
            filteredCharacters = Characters.Where(character => character.Name.ToLower().Contains(searchInput)).ToList();
        }
        else
        {
            filteredCharacters = Characters;
        }
    }

    public async Task<ServiceResponse<List<Character>>> GetCharactersForPost(int id)
    {
        return await CharacterService.GetBlogPostCharacters(id);
    }

    private async Task LoadBlogPosts()
    {
        var response = await BlogService.GetAllBlogPost();
        if (response.Success)
        {
            if (response.Data != null)
            {
                blogPosts = response.Data;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No blog posts available.");
            }
        }
        else
        {
            Console.WriteLine("Error: " + response.Message);
        }
    }


    private async Task LoadBlogPostsAndCharacters()
    {
        var response = await BlogService.GetAllBlogPost();
        if (response.Success)
        {
            if (response.Data != null)
            {
                blogPosts = response.Data;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No blog posts available.");
            }
        }
        else
        {
            Console.WriteLine("Error: " + response.Message);
        }
        await LoadCharactersForBlogPosts();
    }

    private async Task LoadCharactersForBlogPosts()
    {
        Characters = await CharacterService.GimmeAllTheCharacters();
        filteredCharacters = Characters;
        var characterTasks = blogPosts.Select(async post =>
        {
            var response = await GetCharactersForPost(post.Id);
            return response.Data;
        }); //select asyncrously allows for each blogpost to have it's characters and put into a IEnumerable List of Characters

        var charactersResults = await Task.WhenAll(characterTasks); //waits for characterTasks to end before returning a list in order of how they were received

        for (int i = 0; i < blogPosts.Count; i++)
        {
            blogPosts[i].Characters = charactersResults[i]; //connects each characterresult to it's respective BlogPost's navigation property Character, used in line 28
        }
    }

    private async Task OnLogOut()
    {
        blogPosts.Clear();
        StateHasChanged();
    }
}
